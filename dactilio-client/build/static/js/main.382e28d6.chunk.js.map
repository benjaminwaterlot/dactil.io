{"version":3,"sources":["store/game/machine.ts","lib/use-color.ts","components/game/use-key-listener.ts","components/game/GameStats.tsx","components/game/GameSentenceChar/GameSentenceCharRegular.tsx","components/game/GameSentenceChar/GameSentenceCharDimmed.tsx","components/game/GameSentenceChar/GameSentenceCharHighlighted.tsx","components/game/game-sentence.lib.tsx","components/game/GameSentence.tsx","components/game/Game.tsx","App.tsx","reportWebVitals.ts","chakra/layer-styles.ts","chakra/index.ts","index.tsx"],"names":["KEY_STATUS","gameMachine","Machine","id","context","sentence","activeChar","saved","key","type","NEUTRAL","errors","initial","states","playing","meta","always","target","cond","on","KEY_PRESS","actions","over","guards","isCorrectInput","event","sentenceIsDone","length","saveCorrectInput","assign","VALID","saveIncorrectInput","ERROR","incrementChar","COLORS","primary","light","dark","useColor","input","split","shade","colorMode","useColorMode","useKeyListener","send","useEffect","handleKeyPress","e","keycode","window","addEventListener","removeEventListener","GameStatsChar","colors","bg","border","useColorModeValue","color","undefined","borderColor","borderWidth","transition","size","fontSize","fontWeight","in","Boolean","GameStatsErrors","count","WarningTwo","mr","GameStatsWPM","wpm","ArrowRight","GameStats","position","bottom","left","w","spacing","backgroundColor","p","top","CIRCLE_SIZE","GameSentenceCharRegular","char","as","GameSentenceCharDimmed","GameSentenceCharHighlighted","DIMMED_CHARS","CHAR_COMPONENTS","predicate","charIndex","component","includes","getCharComponents","replaceAll","map","CharComponent","find","Error","reduce","chars","isSpace","props","GameSentence","textProps","Game","state","current","mt","borderRadius","fontFamily","value","my","QUOTES","App","console","log","sample","useMachine","toggleColorMode","py","px","direction","align","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","layerStyles","active","inactive","theme","extendTheme","config","initialColorMode","useSystemColorMode","fonts","heading","mono","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.382e28d6.chunk.js","sourcesContent":["import { Event, SCXML, EventData, Machine, State, StateMachine, assign } from 'xstate'\n\nexport enum KEY_STATUS {\n  NEUTRAL = 'NEUTRAL',\n  VALID = 'VALID',\n  ERROR = 'ERROR',\n}\n\nexport interface GameContext {\n  sentence: string\n  activeChar: number\n  saved: {\n    key: string\n    type: KEY_STATUS\n  }\n  errors: string[]\n}\n\nexport interface GameSchema {\n  states: {\n    playing: {}\n    over: {}\n  }\n}\n\nexport interface GameEvent {\n  type: 'KEY_PRESS'\n  key: string\n}\n\nexport type GameMachine = StateMachine<GameContext, GameSchema, GameEvent>\nexport type GameMachineState = State<GameContext, GameEvent>\nexport type Send = (\n  event: GameEvent | Event<GameEvent>[] | SCXML.Event<GameEvent>,\n  payload?: EventData | undefined\n) => GameMachineState\n\nexport const gameMachine = Machine<GameContext, GameSchema, GameEvent>(\n  {\n    id: 'game-machine',\n    context: {\n      sentence: '',\n      activeChar: 0,\n      saved: {\n        key: '',\n        type: KEY_STATUS.NEUTRAL,\n      },\n      errors: [],\n    },\n    initial: 'playing',\n    states: {\n      playing: {\n        meta: 'Game playing !',\n\n        always: [\n          {\n            target: 'over',\n            cond: 'sentenceIsDone',\n          },\n        ],\n        on: {\n          KEY_PRESS: [\n            { cond: 'isCorrectInput', actions: ['saveCorrectInput', 'incrementChar'] },\n            { actions: 'saveIncorrectInput' },\n          ],\n        },\n      },\n      over: {\n        type: 'final',\n        meta: 'Game over !',\n      },\n    },\n  },\n  {\n    guards: {\n      isCorrectInput: ({ sentence, activeChar }, event) => {\n        const isCorrectInput = (sentence[activeChar] ?? 'Enter') === event.key\n\n        return isCorrectInput\n      },\n      sentenceIsDone: ({ sentence, activeChar }) => activeChar === sentence.length,\n    },\n    actions: {\n      saveCorrectInput: assign({\n        saved: (context, event) => ({\n          key: event.key,\n          type: KEY_STATUS.VALID,\n        }),\n      }),\n      saveIncorrectInput: assign({\n        saved: (context, event) => ({\n          key: event.key,\n          type: KEY_STATUS.ERROR,\n        }),\n        errors: ({ errors }, event) => [...errors, event.key],\n      }),\n      incrementChar: assign({\n        activeChar: ({ activeChar }) => activeChar + 1,\n      }),\n    },\n  }\n)\n","import { useColorMode } from '@chakra-ui/core'\n\nconst COLORS: {\n  [type: string]: {\n    [shade: string]: {\n      light: string\n      dark: string\n    }\n  }\n} = {\n  primary: {\n    '0': {\n      light: 'gray.900',\n      dark: 'white',\n    },\n    '100': {\n      light: 'gray.900',\n      dark: 'gray.100',\n    },\n    '600': {\n      light: 'gray.400',\n      dark: 'gray.600',\n    },\n    '700': {\n      light: 'gray.300',\n      dark: 'gray.700',\n    },\n    '800': {\n      light: 'gray.200',\n      dark: 'gray.800',\n    },\n    '900': {\n      light: 'gray.100',\n      dark: 'gray.900',\n    },\n    '1000': {\n      light: 'white',\n      dark: 'gray.900',\n    },\n  },\n}\n\nconst useColor = (input: string) => {\n  const [type, shade] = input.split('.')\n  const { colorMode } = useColorMode()\n\n  return COLORS[type]?.[shade]?.[colorMode] ?? 'red.500'\n}\n\nexport default useColor\n","import { useEffect } from 'react'\nimport { Send } from 'store/game/machine'\n\nconst isValidChar = (keycode: string) => {\n  return keycode.length === 1 || keycode === 'Enter'\n}\n\nconst useKeyListener = (send: Send) =>\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (isValidChar(e.key)) send({ type: 'KEY_PRESS', key: e.key })\n    }\n\n    window.addEventListener('keydown', handleKeyPress)\n\n    return () => window.removeEventListener('keydown', handleKeyPress)\n  })\n\nexport default useKeyListener\n","import React from 'react'\nimport {\n  Box,\n  Circle,\n  SlideFade,\n  Stat,\n  StatArrow,\n  StatHelpText,\n  StatLabel,\n  StatNumber,\n  useColorModeValue,\n  Wrap,\n  WrapItem,\n} from '@chakra-ui/core'\nimport { GameContext, KEY_STATUS } from 'store/game/machine'\nimport { WarningTwoIcon, ArrowRightIcon } from '@chakra-ui/icons'\nimport useColor from 'lib/use-color'\n\nconst CIRCLE_SIZE = 110\n\nconst GameStatsChar = ({ saved, ...rest }: { saved: { type: KEY_STATUS; key: string } }) => {\n  const colors = {\n    bg: useColor('primary.900'),\n    border: useColorModeValue('white', 'primary.800'),\n  }\n\n  return (\n    <Circle\n      bg={saved.type === KEY_STATUS.ERROR ? 'red.600' : colors.bg}\n      color={saved.type === KEY_STATUS.ERROR ? 'white' : undefined}\n      borderColor={colors.border}\n      borderWidth={10}\n      transition=\"background-color .15s ease-out\"\n      size={CIRCLE_SIZE}\n      fontSize=\"5xl\"\n      fontWeight=\"bolder\"\n    >\n      <SlideFade in={Boolean(saved)} key={saved.key}>\n        {saved.key}\n      </SlideFade>\n    </Circle>\n  )\n}\n\nconst GameStatsErrors = ({ count }: { count: number }) => (\n  <Stat>\n    <StatLabel>\n      <WarningTwoIcon mr={2} />\n      Errors\n    </StatLabel>\n    <StatNumber>{count}</StatNumber>\n    <StatHelpText>\n      <StatArrow type=\"decrease\" />\n      25% more!\n    </StatHelpText>\n  </Stat>\n)\n\nconst GameStatsWPM = ({ wpm }: { wpm: number }) => (\n  <Stat>\n    <StatLabel>\n      <ArrowRightIcon mr={2} />\n      WPM\n    </StatLabel>\n    <StatNumber>{wpm}</StatNumber>\n    <StatHelpText>\n      <StatArrow type=\"increase\" />\n      12% increase\n    </StatHelpText>\n  </Stat>\n)\n\nconst GameStats = ({ context }: { context: GameContext }) => (\n  <Box position=\"fixed\" bottom=\"0\" left=\"0\" w=\"100%\">\n    <Wrap spacing={10} backgroundColor={useColor('primary.900')} p={10}>\n      <WrapItem>\n        <GameStatsErrors count={context.errors.length} />\n      </WrapItem>\n      <WrapItem>\n        <GameStatsWPM wpm={context.errors.length} />\n      </WrapItem>\n    </Wrap>\n\n    <Box\n      position=\"absolute\"\n      top={`-${CIRCLE_SIZE * 0.7}px`}\n      left={`calc(50% - ${CIRCLE_SIZE / 2}px)`}\n    >\n      <SlideFade in={Boolean(context.saved.key)}>\n        <GameStatsChar saved={context.saved} />\n      </SlideFade>\n    </Box>\n  </Box>\n)\n\nexport default GameStats\n","import React from 'react'\nimport { Box } from '@chakra-ui/core'\nimport { GameSentenceCharProps } from '../game-sentence.types'\n\nconst GameSentenceCharRegular = ({ char }: GameSentenceCharProps) => <Box as=\"span\">{char}</Box>\n\nexport default GameSentenceCharRegular\n","import React from 'react'\nimport { Box } from '@chakra-ui/core'\nimport { GameSentenceCharProps } from '../game-sentence.types'\nimport useColor from 'lib/use-color'\n\nconst GameSentenceCharDimmed = ({ char }: GameSentenceCharProps) => (\n  <Box as=\"span\" color={useColor('primary.700')}>\n    {char}\n  </Box>\n)\n\nexport default GameSentenceCharDimmed\n","import React from 'react'\nimport { Box } from '@chakra-ui/core'\nimport { GameSentenceCharProps } from '../game-sentence.types'\nimport useColor from 'lib/use-color'\n\nconst GameSentenceCharHighlighted = ({ char }: GameSentenceCharProps) => (\n  <Box as=\"span\" bg={useColor('primary.100')} color={useColor('primary.1000')}>\n    {char}\n  </Box>\n)\n\nexport default GameSentenceCharHighlighted\n","import React from 'react'\nimport { GameSentenceCharDictionnary } from './game-sentence.types'\nimport {\n  GameSentenceCharDimmed,\n  GameSentenceCharHighlighted,\n  GameSentenceCharRegular,\n} from './GameSentenceChar'\n\nconst DIMMED_CHARS = ['␣', '↵']\n\nconst CHAR_COMPONENTS = [\n  {\n    predicate: ({ charIndex, activeChar }) => charIndex === activeChar,\n    component: GameSentenceCharHighlighted,\n  },\n  {\n    predicate: ({ char, charIndex, activeChar }) =>\n      charIndex < activeChar || DIMMED_CHARS.includes(char),\n    component: GameSentenceCharDimmed,\n  },\n  {\n    predicate: () => true,\n    component: GameSentenceCharRegular,\n  },\n] as GameSentenceCharDictionnary\n\nconst getCharComponents = (sentence: string, activeChar: number) =>\n  sentence\n    .replaceAll(' ', '␣')\n    .split('')\n    /**\n     * Get our React component for this character\n     */\n    .map((char, charIndex) => {\n      const CharComponent = CHAR_COMPONENTS.find(({ predicate }) =>\n        predicate({ char, charIndex, activeChar })\n      )?.component\n      if (!CharComponent) throw new Error('A char component should always be valid')\n\n      return <CharComponent key={charIndex} char={char} />\n    })\n    /**\n     *\n     */\n    .reduce((chars, char, charIndex) => {\n      const isSpace = char.props.char === '␣'\n      return [...chars, char, isSpace && <wbr key={`␣${charIndex}`} />]\n    }, [] as (JSX.Element | boolean)[])\n\nexport { getCharComponents }\n","import React from 'react'\nimport { Text, TextProps } from '@chakra-ui/core'\n\nimport { GameSentenceCharDictionnary } from './game-sentence.types'\nimport { getCharComponents } from './game-sentence.lib'\nimport {\n  GameSentenceCharDimmed,\n  GameSentenceCharHighlighted,\n  GameSentenceCharRegular,\n} from './GameSentenceChar'\n\nconst DIMMED_CHARS = ['␣', '↵']\n\nconst CHAR_COMPONENTS = [\n  {\n    predicate: ({ charIndex, activeChar }) => charIndex === activeChar,\n    component: GameSentenceCharHighlighted,\n  },\n  {\n    predicate: ({ char, charIndex, activeChar }) =>\n      charIndex < activeChar || DIMMED_CHARS.includes(char),\n    component: GameSentenceCharDimmed,\n  },\n  {\n    predicate: () => true,\n    component: GameSentenceCharRegular,\n  },\n] as GameSentenceCharDictionnary\n\nconst GameSentence = ({\n  sentence,\n  activeChar,\n  ...textProps\n}: { sentence: string; activeChar: number } & TextProps) => {\n  return (\n    <Text {...textProps}>\n      {getCharComponents(sentence, activeChar)}\n\n      {/* {sentence\n        .replaceAll(' ', '␣')\n        .split('')\n        .map((char, charIndex) => {\n          const CharComponent = CHAR_COMPONENTS.find(({ predicate }) =>\n            predicate({ char, charIndex, activeChar })\n          )?.component\n          if (!CharComponent) throw new Error('A char component should always be valid')\n\n          return <CharComponent key={charIndex} char={char} />\n        })\n        .reduce((chars, char) => {\n          const isSpace = char.props.char === '␣'\n          return [...chars, char, isSpace && <wbr />]\n        }, [] as (JSX.Element | boolean)[])} */}\n    </Text>\n  )\n}\n\nexport default GameSentence\n","import React from 'react'\nimport { Box, Heading } from '@chakra-ui/core'\nimport useColor from 'lib/use-color'\n\nimport { GameMachineState, Send } from 'store/game/machine'\nimport useKeyListener from './use-key-listener'\n\nimport GameStats from './GameStats'\nimport GameSentence from './GameSentence'\n\nconst getMeta = (state: GameMachineState) => state.meta[`game-machine.${state.value}`]\n\nconst Game = ({ current, send }: { current: GameMachineState; send: Send }) => {\n  useKeyListener(send)\n\n  return (\n    <Box\n      mt=\"10vh\"\n      p={10}\n      bg={useColor('primary.900')}\n      borderRadius={5}\n      w={['100%', '80%', '70%']}\n      fontFamily=\"mono\"\n      fontSize=\"2xl\"\n    >\n      <Heading color=\"gray.500\">{getMeta(current)}</Heading>\n      <GameSentence\n        my={5}\n        sentence={current.context.sentence}\n        activeChar={current.context.activeChar}\n      />\n\n      <GameStats context={current.context} />\n    </Box>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport { Button, Flex, Heading, useColorMode } from '@chakra-ui/core'\nimport { useMachine } from '@xstate/react'\nimport { gameMachine } from './store/game/machine'\nimport Game from './components/game/Game'\nimport sample from 'lodash/sample'\n\nconst QUOTES = [\n  \"If you like what you do, and you're lucky enough to be good at it, do it for that reason.\",\n]\nfunction App() {\n  console.log({ sample: sample(QUOTES) })\n\n  const [current, send] = useMachine(gameMachine, {\n    context: { sentence: sample(QUOTES) },\n  })\n\n  const { toggleColorMode } = useColorMode()\n\n  return (\n    <Flex as=\"header\" py={12} px={6} direction=\"column\" align=\"center\">\n      <Heading size=\"2xl\" as=\"h1\">\n        Dactil.io\n      </Heading>\n\n      <Game current={current} send={send} />\n\n      <Button my={5} onClick={toggleColorMode}>\n        Toggle mode\n      </Button>\n    </Flex>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","const layerStyles = {\n  sentence: {\n    active: {\n      color: 'gray.200',\n    },\n    inactive: {\n      color: 'gray.600',\n    },\n  },\n}\n\nexport default layerStyles\n","import { extendTheme } from '@chakra-ui/core'\nimport layerStyles from './layer-styles'\n\nconst theme = extendTheme({\n  config: { initialColorMode: 'dark', useSystemColorMode: false },\n  fonts: {\n    heading: 'Merriweather',\n    mono: 'Operator Mono',\n  },\n  layerStyles,\n})\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { ChakraProvider, CSSReset } from '@chakra-ui/core'\nimport { RecoilRoot } from 'recoil'\nimport theme from './chakra'\n\nconsole.log({ theme })\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ChakraProvider theme={theme}>\n        <CSSReset />\n        <App />\n      </ChakraProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}